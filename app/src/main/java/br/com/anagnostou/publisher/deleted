*************************************************


****************************************************
package br.com.anagnostou.publisher.services;

public class CheckSQLService extends Service {
    private Handler mHandler;
    public static final int NOTIFICATION_ID = 234;
    DBAdapter dbAdapter;
    SQLiteDatabase sqLiteDatabase;
    SharedPreferences sp;
    SharedPreferences.Editor spEditor;
    String checkTTrelatorioUrl;
    String checkTTcadastroUrl;
    Integer checkIntervall;
    String ttrelatorio_id;
    String ttcadastro_id;
    Thread thread;

    Integer idRelatorio, idCadastro, idRegistroProcessadoRelatorio, idRegistroProcessadoCadastro;
    Boolean dataBaseOperationInProgress = false;

    public class CheckSQLServiceBinder extends Binder {
        public CheckSQLService getBinder() {
            //L.m("CheckSQLServiceBinder.getService");
            return CheckSQLService.this;
        }
    }

    private IBinder mBinder = new CheckSQLServiceBinder();

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        checkTTrelatorioUrl = sp.getString("php_ttrelatorio", "");
        checkTTcadastroUrl = sp.getString("php_ttcadastro", "");

        ttrelatorio_id = sp.getString("ttrelatorio_id", "");
        if (!ttrelatorio_id.isEmpty()) {
            idRelatorio = Integer.parseInt(ttrelatorio_id);
        }

        ttcadastro_id = sp.getString("ttcadastro_id", "");
        if (!ttcadastro_id.isEmpty()) {
            idCadastro = Integer.parseInt(ttcadastro_id);
            L.m("onStartCommand ttcadastro_id: " + ttcadastro_id);
        } else L.m("ttcadastro_id.isEmpty");

        return START_NOT_STICKY; //START_STICKY
    }

    @Override
    public void onCreate() {
        // super.onCreate();
        dbAdapter = new DBAdapter(getApplicationContext());
        sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();
        sp = PreferenceManager.getDefaultSharedPreferences(this);
        checkTTrelatorioUrl = sp.getString("php_ttrelatorio", "");
        checkTTcadastroUrl = sp.getString("php_ttcadastro", "");

        ttrelatorio_id = sp.getString("ttrelatorio_id", "");
        if (!ttrelatorio_id.isEmpty()) {
            idRelatorio = Integer.parseInt(ttrelatorio_id);
        } else {
            idRelatorio = 0;
        }
        ttcadastro_id = sp.getString("ttcadastro_id", "");
        if (!ttcadastro_id.isEmpty()) {
            idCadastro = Integer.parseInt(ttcadastro_id);
        } else {
            idCadastro = 0;
        }

        dataBaseOperationInProgress = false;
        checkIntervall = 60000;
        if (thread == null) {
            thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    checkUpdates();
                }
            });
        }
        thread.start();
    }

    private void checkUpdates() {
        L.m("checkUpdates every ms: " + checkIntervall);
        while (!dataBaseOperationInProgress) {
            try {
                //createNotification();
                L.m("Thread ID " + Thread.currentThread().getId());
                Thread.sleep(5000);
                checkTTrelatorio();
                Thread.sleep(5000);
                chechTTcadastro();
                Thread.sleep(checkIntervall);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }


    }

    private void chechTTcadastro() {
        L.m("chechTTcadastro idCadstro beginning: " + idCadastro);
        StringRequest srCadastro = new StringRequest(checkTTcadastroUrl, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                if (!response.contentEquals("0")) {
                    dataBaseOperationInProgress = true;
                    try {
                        JSONArray jsonArray = new JSONArray(response);
                        if (!sqLiteDatabase.isOpen())
                            sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();
                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject jsonObject = jsonArray.getJSONObject(i);
                            if (jsonObject.getInt("id") > idCadastro) {
                                if (jsonObject.getString("action").contentEquals("INSERT")) {
                                    /*
                                    dbAdapter.insertDataRelatorio(new Relatorio(jsonObject.getInt("ano"),
                                            jsonObject.getInt("mes"), jsonObject.getString("nome"),
                                            jsonObject.getString("modalidade"), jsonObject.getInt("videos"),
                                            jsonObject.getInt("horas"), jsonObject.getInt("publicacoes"),
                                            jsonObject.getInt("revisitas"), jsonObject.getInt("estudos")));
                                    */
                                } else if (jsonObject.getString("action").contentEquals("UPDATE")) {
                                    /*
                                    dbAdapter.updateDataRelatorio(new Relatorio(jsonObject.getInt("ano"),
                                            jsonObject.getInt("mes"), jsonObject.getString("nome"),
                                            jsonObject.getString("modalidade"), jsonObject.getInt("videos"),
                                            jsonObject.getInt("horas"), jsonObject.getInt("publicacoes"),
                                            jsonObject.getInt("revisitas"), jsonObject.getInt("estudos")));
                                    */
                                }
                                idRegistroProcessadoCadastro = jsonObject.getInt("id");
                            }
                        }
                        if (idRegistroProcessadoCadastro != null) {
                            idCadastro = idRegistroProcessadoCadastro;
                            spEditor = sp.edit();
                            spEditor.putString("ttcadastro_id", idRegistroProcessadoCadastro.toString());
                            spEditor.commit();
                        } else L.m("chechTTcadastro idRegistroProcessado is null ");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    dataBaseOperationInProgress = false;
                    L.m("chechTTcadastro DatabaseOperation Completed! with ID: " + idRegistroProcessadoCadastro);
                }
            }
        }, null);
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(srCadastro);


    }

    public void checkTTrelatorio() {
        L.m("checkTTrelatorio idRelatorio beginning: " + idRelatorio);
        StringRequest srRelatorio = new StringRequest(checkTTrelatorioUrl, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                if (!response.contentEquals("0")) {
                    dataBaseOperationInProgress = true;
                    try {
                        JSONArray jsonArray = new JSONArray(response);
                        if (!sqLiteDatabase.isOpen())
                            sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();
                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject jsonObject = jsonArray.getJSONObject(i);
                            if (jsonObject.getInt("id") > idRelatorio) {
                                if (jsonObject.getString("action").contentEquals("INSERT")) {
                                    dbAdapter.insertDataRelatorio(new Relatorio(jsonObject.getInt("ano"),
                                            jsonObject.getInt("mes"), jsonObject.getString("nome"),
                                            jsonObject.getString("modalidade"), jsonObject.getInt("videos"),
                                            jsonObject.getInt("horas"), jsonObject.getInt("publicacoes"),
                                            jsonObject.getInt("revisitas"), jsonObject.getInt("estudos")));
                                } else if (jsonObject.getString("action").contentEquals("UPDATE")) {
                                    dbAdapter.updateDataRelatorio(new Relatorio(jsonObject.getInt("ano"),
                                            jsonObject.getInt("mes"), jsonObject.getString("nome"),
                                            jsonObject.getString("modalidade"), jsonObject.getInt("videos"),
                                            jsonObject.getInt("horas"), jsonObject.getInt("publicacoes"),
                                            jsonObject.getInt("revisitas"), jsonObject.getInt("estudos")));
                                }
                                idRegistroProcessadoRelatorio = jsonObject.getInt("id");
                            }
                        }
                        if (idRegistroProcessadoRelatorio != null) {
                            idRelatorio = idRegistroProcessadoRelatorio;
                            spEditor = sp.edit();
                            spEditor.putString("ttrelatorio_id", idRegistroProcessadoRelatorio.toString());
                            spEditor.commit();
                        } else L.m("checkTTrelatorio idRegistroProcessado is null ");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    dataBaseOperationInProgress = false;
                    L.m("checkTTrelatorio DatabaseOperation Completed! with ID: " + idRegistroProcessadoRelatorio);
                }
            }
        }, null);
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(srRelatorio);
    }


    public void createNotification() {
        Intent intent = new Intent(this, MainActivity.class);
        TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(this);
        taskStackBuilder.addParentStack(MainActivity.class);
        taskStackBuilder.addNextIntent(intent);
        PendingIntent pendingIntent = taskStackBuilder.
                getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);
        Notification notification = new Notification.Builder(this)
                .setSmallIcon(R.mipmap.ic_launcher)
                .setContentTitle(getString(R.string.app_name))
                .setContentText("Existem Arquivos a serem baixados")
                .setAutoCancel(true)
                .setPriority(Notification.PRIORITY_MAX)
                .setDefaults(Notification.DEFAULT_VIBRATE)
                .setContentIntent(pendingIntent)
                .build();
        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        notificationManager.notify(NOTIFICATION_ID, notification);
    }


}




****************************************

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
    int PERM_EXT_STORAGE = 99;
    public boolean bancoTemDados = false;
    public boolean bBackgroundJobs = false;
    boolean mStopLoop;
    ConnectivityManager connMgr;
    DBAdapter dbAdapter;
    SQLiteDatabase sqLiteDatabase;

    /**
     * SERVICE
     */
    Intent checkSQLServerIntent;
    ServiceConnection serviceConnection;
    CheckSQLService checkSQLService;
    boolean isServiceBound;

    public static final String NA = "";
    SecondSectionsPagerAdapter secondSectionsPagerAdapter;
    public SectionsPagerAdapter mSectionsPagerAdapter;

    SharedPreferences sp;
    SpecialPagerAdapter specialPagerAdapter;
    String DATABASE_NAME;
    String DB_FULL_PATH;
    String fosPublicador;
    String fosRelatorio;
    String fosUpdate;
    String nameSearch;
    String sdcard;
    String spCadastro;
    String spHomepage;
    String spRelatorio;
    String spUpdate;
    public ViewPager mViewPager;
    private ProgressDialog progressDialog;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        /******NEW DrawerLayout *********/
        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawerLayout.addDrawerListener(toggle);
        toggle.syncState();
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
        /******************/

        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());
        secondSectionsPagerAdapter = new SecondSectionsPagerAdapter(getSupportFragmentManager());
        specialPagerAdapter = new SpecialPagerAdapter(getSupportFragmentManager());
        mViewPager = (ViewPager) findViewById(R.id.viewpager);
        mViewPager.setAdapter(mSectionsPagerAdapter);
        TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
        tabLayout.setupWithViewPager(mViewPager);

        getSupportActionBar().setTitle(R.string.por_grupo);
        getSupportActionBar().setSubtitle(getString(R.string.atividades_da_congregacao));

        dbAdapter = new DBAdapter(getApplicationContext());
        sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();
        DATABASE_NAME = dbAdapter.mydbHelper.getDatabaseName();
        DB_FULL_PATH = sqLiteDatabase.getPath();
        sdcard = Environment.getExternalStorageDirectory().getAbsolutePath() + "/";

        checkPermissions();
        PreferenceManager.setDefaultValues(this, R.xml.app_preferences, false);//set just once
        sp = PreferenceManager.getDefaultSharedPreferences(this);

        spUpdate = sp.getString("update", NA);
        spCadastro = sp.getString("cadastro", NA);
        spRelatorio = sp.getString("relatorio", NA);
        spHomepage = sp.getString("homepage", NA);
        fosPublicador = sdcard + spCadastro;//where to store the textfiles
        fosRelatorio = sdcard + spRelatorio;
        fosUpdate = sdcard + spUpdate;
        bBackgroundJobs = false;

        //Origem dos DAdos: SQL or Text
        //incialização Tabela,
        if (tablesExist()) {
            if (Utilidades.temDadosNoBanco(MainActivity.this)) {
                if (sp.getString("sourceDataImport", "").contentEquals("SQL")) {
                    if (sp.getBoolean("fullMySQLImport", false)) {
                        //
                    } else {
                        //verficar se existem registros nas tabelas ttcadastro e ttrelatori

                    }

                } else {
                    final CheckUpdateAvailable checkUpdateAvailable = new CheckUpdateAvailable(MainActivity.this, this);
                    checkUpdateAvailable.execute(spHomepage + spUpdate, fosUpdate);
                }
                bancoTemDados = true;
                //put in the onStart
                //checkSQLServerIntent = new Intent(this,CheckSQLService.class);
                //startService(checkSQLServerIntent);
                //bindService();
            }
        } else {
            // criar tabelas e importar os dados
            atualizarBancoDeDados();
        }


    }

    public boolean tablesExist() {
        if (Utilidades.existeTabela("relatorio", MainActivity.this)
                && Utilidades.existeTabela("publicador", MainActivity.this)
                && Utilidades.existeTabela("versao", MainActivity.this)) return true;
        else return false;
    }


    @Override
    protected void onStart() {
        super.onStart();
        checkSQLServerIntent = new Intent(this, CheckSQLService.class);
        bindService();

    }

    public void getPHPJsonPublisherData() {
        //colocar no preferences
        // com url errado, parou, como tratar do erro
        String url = sp.getString("php_publisher_full", NA);
        StringRequest srPublisher = new StringRequest(url, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                showPHPJsonPublisherData(response);
            }
        },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        L.t(MainActivity.this, error.getMessage().toString());
                    }
                });
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(srPublisher);
    }

    public void showPHPJsonPublisherData(String response) {
//        if (!sqLiteDatabase.isOpen())
//            sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();
        try {
            JSONArray arrayJSON = new JSONArray(response);
            if (sp.getBoolean("fullMySQLImport", false)) {
                dbAdapter.mydbHelper.dropTablePublicador(sqLiteDatabase);
                L.m("Full Import, dropping table");
            }
            JsonTaskPublicador jsonTaskPublicador = new JsonTaskPublicador(MainActivity.this, this);
            jsonTaskPublicador.execute(arrayJSON);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public void getPHPJsonRelatorioData() {
        //colocar no preferences
        // com url errado, parou, como tratar do erro
        String url = sp.getString("php_report_full", NA);
        StringRequest srRelatorio = new StringRequest(url, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                showPHPJsonRelatorioData(response);
            }
        },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        L.t(MainActivity.this, error.getMessage());

                    }
                });
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(srRelatorio);
    }

    public void showPHPJsonRelatorioData(String response) {
//        if (!sqLiteDatabase.isOpen())
//            sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();

        try {
            JSONArray arrayJSON = new JSONArray(response);
            if (sp.getBoolean("fullMySQLImport", false)) {
                dbAdapter.mydbHelper.dropTableRelatorio(sqLiteDatabase);
                L.m("Full Import, dropping table");
            }
            JsonTaskRelatorio jsonTaskRelatorio = new JsonTaskRelatorio(MainActivity.this, this, mSectionsPagerAdapter);
            jsonTaskRelatorio.execute(arrayJSON);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public boolean atualizarBancoDeDados() {
        if (Utilidades.isOnline((ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE))) {
            /** em vez de chamar a activity, chamar várias Asynctask que uma chama a outra através do onPostExecute */
            if (!bBackgroundJobs) {
                if (sp.getString("sourceDataImport", "").contentEquals("SQL")) {

//                    if (!sqLiteDatabase.isOpen())
//                        sqLiteDatabase = dbAdapter.mydbHelper.getWritableDatabase();
                    dbAdapter.mydbHelper.dropTablePublicador(sqLiteDatabase);
                    dbAdapter.mydbHelper.dropTableRelatorio(sqLiteDatabase);
                    dbAdapter.mydbHelper.dropTableVersao(sqLiteDatabase);
                    getPHPJsonPublisherData();//onPostExecute chama a outra
                } else {
                    //importacao TEXTO
                    final DownloadTaskUpdate downloadTaskUpdate = new DownloadTaskUpdate(MainActivity.this, this, mSectionsPagerAdapter);
                    downloadTaskUpdate.execute(spHomepage + spUpdate);
                }
            } else L.t(getApplicationContext(), getString(R.string.background_jobs_in_progress));
            return true;
        } else {
            L.t(getApplicationContext(), getString(R.string.sem_conexao_internet));
            return false;
        }
    }

    public void checkPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.CALL_PHONE)) {
            } else {
                int PERM_PHONE = 77;
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CALL_PHONE}, PERM_PHONE);
            }
        }
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            // Should we show an explanation?
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                // Show an explanation to the user *asynchronously* -- don't block
            } else {
                // No explanation needed, we can request the permission.
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERM_EXT_STORAGE);
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == PERM_EXT_STORAGE) {
            // Request for camera permission.
            if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission has been granted. Start something
            } else {
                // Permission request was denied.
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        /** SEARCH **/
        SearchView searchView = (SearchView) menu.findItem(R.id.menu_search).getActionView();
        SearchManager searchManager = (SearchManager) getSystemService(SEARCH_SERVICE);
        searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        /** Handle action bar item clicks here. The action bar will
         * automatically handle clicks on the Home/Up button, so long
         * as you specify a parent activity in AndroidManifest.xml. **/
        int id = item.getItemId();
        if (id == R.id.action_updateDatabase) {
            atualizarBancoDeDados();
            return true;
        } else if (id == R.id.action_settings) {
            startActivity(new Intent(this, AppPreferences.class));

            return true;
        } else if (id == R.id.action_clear) {
            copyDataBaseSdCard();
        } else if (id == R.id.Json) {
            Gson gson = new GsonBuilder().create();
            unbindService();
        }
        return super.onOptionsItemSelected(item);
    }

    public class SectionsPagerAdapter extends FragmentStatePagerAdapter {
        public SectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            if (position == 0 && bancoTemDados) {
                return new Adriano();
            }
            if (position == 1 && bancoTemDados) {
                return new SalaoDoReino();
            }
            if (position == 2 && bancoTemDados) {
                return new VilaNova();
            }
            if (position == 3 && bancoTemDados) {
                return new Centro();
            }

            if (position == 4 && bancoTemDados) {
                return new Anciaos();
            }
            if (position == 5 && bancoTemDados) {
                return new Servos();
            }

            if (position == 6 && bancoTemDados) {
                return new Pregadores();
            }

            if (position == 7 && bancoTemDados) {
                return new Pioneiros();
            }

            return new Vazio();
        }

        @Override // Show x total pages.
        public int getCount() {
            return 8;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            switch (position) {
                case 0:
                    return "ADRIANO";
                case 1:
                    return "SALÃO DO REINO";
                case 2:
                    return "VILA NOVA";
                case 3:
                    return "CENTRO";

                /** TABS SCROLLABLE *******/
                case 4:
                    return "ANCIÃOS";
                case 5:
                    return "SERVOS";
                case 6:
                    return "PUBLICADORES";
                case 7:
                    return "PIONEIROS";

            }
            return null;
        }
    }

    public class SecondSectionsPagerAdapter extends FragmentStatePagerAdapter {
        public SecondSectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            if (position == 0 && bancoTemDados) {
                return new Anciaos();
            }
            if (position == 1 && bancoTemDados) {
                return new Servos();
            }

            if (position == 3 && bancoTemDados) {
                return new Pregadores();
            }

            if (position == 2 && bancoTemDados) {
                return new Pioneiros();
            }
            return new Vazio();
        }

        @Override // Show x total pages.
        public int getCount() {
            return 4;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            switch (position) {
                case 0:
                    return "ANCIÃOS";
                case 1:
                    return "SERVOS";
                case 3:
                    return "PUBLICADORES";
                case 2:
                    return "PIONEIROS";
            }
            return null;
        }
    }

    public class SpecialPagerAdapter extends FragmentStatePagerAdapter {
        public SpecialPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            //IRREGULARES
            if (position == 0 && bancoTemDados) {
                return new Irregulares();
            }
            //VARÕES BATIZADOS
            if (position == 1 && bancoTemDados) {
                return new VaroesBatizados();
            }
            if (position == 2 && bancoTemDados) {
                return new AnoBatismo();
            }
            //NÃO BATIZADOS
            if (position == 3 && bancoTemDados) {
                return new NaoBatizados();
            }

            return new Vazio();
        }

        @Override // Show x total pages.
        public int getCount() {
            return 4;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            switch (position) {
                case 0:
                    return "IRREGULARES";
                case 1:
                    return "VARÕES BATIZADOS";
                case 2:
                    return "MENOS DE UM ANO DE BATISMO";
                case 3:
                    return "NÃO BATIZADOS";
            }
            return null;
        }
    }

    @Override
    /***DrawerLayout **/
    public boolean onNavigationItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.publicadores) {
            mViewPager.setAdapter(mSectionsPagerAdapter);
            getSupportActionBar().setTitle(getString(R.string.por_grupo));
        } else if (id == R.id.porPrivilegio) {
            mViewPager.setAdapter(secondSectionsPagerAdapter);
            getSupportActionBar().setTitle(getString(R.string.por_privilegio));
        } else if (id == R.id.pesquisasEspeciais) {
            mViewPager.setAdapter(specialPagerAdapter);
            getSupportActionBar().setTitle(getString(R.string.pesquisas_especiais));
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        //super.onActivityResult(requestCode, resultCode, data);
        /** http://stackoverflow.com/questions/22083639/calling-activity-from-fragment-then-return-to-fragment
         * returns to the calling fragment */
    }

    public void copyDataBaseSdCard() {
        try {
            File sd = Environment.getExternalStorageDirectory();
            if (sd.canWrite()) {
                String currentDBPath = DB_FULL_PATH;
                String backupDBPath = DATABASE_NAME;
                File currentDB = new File(currentDBPath);
                File backupDB = new File(sd, backupDBPath);
                if (currentDB.exists()) {

                    FileChannel src = new FileInputStream(currentDB).getChannel();
                    FileChannel dst = new FileOutputStream(backupDB).getChannel();
                    dst.transferFrom(src, 0, src.size());
                    src.close();
                    dst.close();
                }
            }
        } catch (Exception e) {
            L.m(e.toString());
        }
    }

    private void bindService() {
        if (serviceConnection == null) {
            serviceConnection = new ServiceConnection() {
                @Override
                public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
                    CheckSQLService.CheckSQLServiceBinder checkSQLBinder = (CheckSQLService.CheckSQLServiceBinder) iBinder;
                    checkSQLService = checkSQLBinder.getBinder();
                    isServiceBound = true;
                }

                @Override
                public void onServiceDisconnected(ComponentName componentName) {
                    isServiceBound = false;
                }
            };
        }
        bindService(checkSQLServerIntent, serviceConnection, Context.BIND_AUTO_CREATE);
    }

    private void unbindService() {
        if (isServiceBound) {
            L.m("unbindService(serviceConnection);");
            unbindService(serviceConnection);
            isServiceBound = false;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            unbindService();
            L.m("un binding");
        } catch (Exception e) {
            //L.t(this, "Nothing Registered");
        }
    }

    @Override
    protected void onPause() {
        super.onPause();

        try {
            unbindService();
            L.m("un binding");
        } catch (Exception e) {
            //L.t(this, "Nothing Registered");
        }

    }
}

****************************************

public void getPHPJsonPublisherData() {
        progressDialog = ProgressDialog.show(this, "Please wait...", "Fetching...", false, false);
        //colocar no preferences
        // com url errado, parou, como tratar do erro
        String url = sp.getString("php_publisher_full", NA);
        StringRequest stringRequest = new StringRequest(url, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                progressDialog.dismiss();
                showPHPJsonPublisherData(response);
            }
        },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        L.t(MainActivity.this, error.getMessage().toString());

                    }
                });
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);
    }



private void bindService() {
        if (serviceConnection == null) {
            serviceConnection = new ServiceConnection() {
                @Override
                public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
                    CheckSQLService.CheckSQLServiceBinder checkSQLBinder = (CheckSQLService.CheckSQLServiceBinder) iBinder;
                    checkSQLService = checkSQLBinder.getBinder();
                    isServiceBound = true;
                }

                @Override
                public void onServiceDisconnected(ComponentName componentName) {
                    isServiceBound = false;
                }
            };

            //bindService(checkSQLServerIntent, serviceConnection, Context.BIND_AUTO_CREATE);
        }
        bindService(checkSQLServerIntent, serviceConnection, Context.BIND_AUTO_CREATE);
    }

 //ttrelatorio_id = sp.getString("ttrelatorio_id", "").toString();
       /* if (!ttrelatorio_id.isEmpty()) {
            id = Integer.parseInt(ttrelatorio_id);
            L.m("ttrelatorio_id antes: " + ttrelatorio_id);
        } else id = 1;
        idRegistroProcessado = id;*/
        //L.m("id antes: " + ttrelatorio_id);
//TTrelatorioRequest.REGISTER_REQUEST_URL = checkTTrelatorioUrl;
        //TTrelatorioRequest ttRelatorioRequest = new TTrelatorioRequest("George", new Response.Listener<String>() {


return db.rawQuery("SELECT DISTINCT publicador._id,  relatorio.nome, publicador.familia FROM relatorio,publicador " +
                "WHERE  relatorio.nome = publicador.nome " +
                "AND relatorio.ano >= ? " +
                "AND relatorio.ano <= ? " +
                "AND relatorio.mes >= ? AND relatorio.mes <= ?" +
                "AND relatorio.horas < 1 " +
                "ORDER BY relatorio.nome", selectionArgs);

        /**
         * consulta em Janeiro, periodo 7,8,9,10,11,12 do ano anterior
         * Anoini=anofinal = calendar.get(Calendar.YEAR) - 1;
         * mesini = calendar.get(Calendar.MONTH) (0) + 7
         * mesfim = calendar.get(Calendar.MONTH) (0) + 12 = mesini + 5 = 12
         *
         * consulta em Fevereior, periodo 8,9,10,11,12 do ano anterior e 1 do ano atual
         * anoini= calendar.get(Calendar.YEAR) - 1;
         * anofinal = anoini + 1;
         * mesfim = calendar.get(Calendar.MONTH) (1)
         * mesini = calendar.get(Calendar.MONTH) (1)
         *
         * outro SQL
         *
         *
         *
         * consulta em Dezembro, imesfim = 12, periodo 11,10,9,8,7,6
         * imsefim =  imesfim - 1 = 11, imesini = imesfim - 5 = 6
         *
         * consulta em Julho, imesfim = 7, periodo 6,5,4,3,2,1
         * imsefim =  imesfim - 1 = 6, imesini = imesfim - 5 = 1
         *
         *
         *
         * consulta em Junho, imesfim = 6, periodo 5,4,3,2,1,12
         * imsefim =  imesfim - 1 = 5, imesini = imesfim - 5 + 12 = 12
         *
         *preciso distinguir valor menor malor maior
         *
         *
        */

public Cursor cursorSugestaoPublicador(String query) {
        SQLiteDatabase db = mydbHelper.getWritableDatabase();
        String[] columns = {DBHelper.UID, DBHelper.NOME};
        query = "%" + query.trim() + "%";
        String[] selectionArgs = {query};
        return db.rawQuery("SELECT _id, nome AS SUGGEST_COLUMN_TEXT_1, rowid AS SUGGEST_COLUMN_INTENT_DATA_ID FROM publicador WHERE NOME LIKE ? ", selectionArgs);
        //return db.query(DBHelper.TABLE_NAME_PUBLICADOR, columns, DBHelper.NOME + " LIKE ? ", selectionArgs, null, null,null);

    }

