Formulario php no browser
Abandonded shared preferences, adopted AppPreferences
Full update JSON Array, MySQL


2016.12.13
Pioneiros
   Mostrar o saldo e media mensal autal e medias mensal para alcançar o alvo no ano de serviço
   Pode ser feito na tela de AtividadesActivity talvez como dialog? ou usar visibility

MySQL
   1. Montar um formulário HTML para incluir relatorios no servidor MySQL.   Did it
   2. Modificar o app para importar dados do servidor e não do EXcel ou ambos?


   Tres Maneiras de Alimentar o Banco base: Export/Import do Excel, Tela no Android

TextImport
MySQL Json import
I want to keep  it separate


   ?OFFLINE, cadastar no SQLITE local e depois pedir para syncronizar com MySQL remoto,
   criar uma tabela extra so para
   atualizar e depois de enviar para o My SQLi apagar os registros?
   1. Cadastar diretamente no servidor o relatorio atraves de um formulario php
   2. O SQLlite busca a atualização diretamente do MySQL


   Preference:
   1. Importar Dados do Servidor SQL ou Arquivo Texto? //temporário até conseguir a transição completa para o SQL
   2. ao importar SQL, importar tabela completa ou últimas atualizações?, Default autualizações
      o últmo a importar as atualizações envia commando para deletar o registro por id
   3. dominio, url 'http://www.anagnostou.com.br/phptut/', example REGISTER_REQUEST_URL = "http://www.anagnostou.com.br/phptut/json_report.php";


O que acontece quando pedimos para atualizar o banco
if (id == R.id.action_updateDatabase)  atualizarBancoDeDados();
check if system is connected to the internet
check if there are Asynctask(AST) or bBackgroundJobs under way
call the first AST  DownloadTaskUpdate which calls DownloadTaskRelatorio
which calls TaskRelatorio which calls DownloadTaskPublicador which calls TaskPublicador.








_Date today = Calendar.getInstance().getTime();
        Calendar mMoment = new GregorianCalendar();
        mMoment.setTime(today);
        //L.m(Calc.comparaData("02/08/2016"));
        Date data;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        try {
            data = sdf.parse("02/08/2016 10:22");
            L.m("SDF parse: " + data.toString());
        } catch (ParseException e) {
            e.printStackTrace();
        }

L.t(this, Calendar.getInstance().toString());

java.util.GregorianCalendar[
time=1470166842672,
areFieldsSet=true,
lenient=true,
zone=America/Sao_Paulo,
firstDayOfWeek=1,
minimalDaysInFirstWeek=1,
ERA=1,
YEAR=2016,
MONTH=7,
WEEK_OF_YEAR=32,
WEEK_OF_MONTH=1,
DAY_OF_MONTH=2,
DAY_OF_YEAR=215,
DAY_OF_WEEK=3,
DAY_OF_WEEK_IN_MONTH=1,
AM_PM=1,
HOUR=4,
HOUR_OF_DAY=16,
MINUTE=40,
SECOND=42,
MILLISECOND=672,
ZONE_OFFSET=-10800000,
DST_OFFSET=0]

    /*
        A good way to organize a contract class is to put definitions that are global
        to your whole database in the root level of the class.
        Then create an inner class for each table that enumerates its columns.

     */

        /*
        A more concise way of checking whether a network interface is available is as follows.
        The method getActiveNetworkInfo() returns a NetworkInfo instance representing
        the first connected network interface it can find,
        or null if none of the interfaces is connected
        (meaning that an internet connection is not available):

         */


/*
int oldVersion = sqLiteDatabase.getVersion();
int newVersion = oldVersion + 1;

 */

   fos = "/sdcard/cadastro.txt";
         downloadingFileName = "Cadastro";
         final DownloadTask downloadPublicadorTask = new DownloadTask(getApplicationContext());
         downloadPublicadorTask.execute("http://www.anagnostou.com.br.com.anagnostou.br/overseer/cadastro.txt");

         fos = "/sdcard/relatorio.txt";
         downloadingFileName = "Relatorio";
         final DownloadTask downloadRelatorioTask = new DownloadTask(getApplicationContext());
         downloadRelatorioTask.execute("http://www.anagnostou.com.br.com.anagnostou.br/overseer/relatorio.txt");

         fos = "/sdcard/update.txt";
         downloadingFileName = "versao";
         final DownloadTask downloadVersaoTask = new DownloadTask(getApplicationContext());
         downloadVersaoTask.execute("http://www.anagnostou.com.br.com.anagnostou.br/overseer/update.txt");